apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: coder-testing-pipeline
spec:
  params:
    - name: repo_url
      type: string
    - name: revision
      type: string
    - name: coder-helm-version
      type: string
    - name: template-name
      type: string
    - name: testing-namespace
      type: string
    - name: testing-tag
      type: string
  workspaces:
    - name: source
    - name: basic-auth
  tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: testing-coder-template
        runAfter:
            - fetch-repository
        workspaces:
          - name: template
            workspace: source
        params:
          - name: namespace
            value: $(params.testing-namespace)
          - name: tag
            value: $(params.testing-tag)
          - name: coder-helm-version
            value: $(params.coder-helm-version)
        taskSpec:
          workspaces:
            - name: template
              description: Terraform template for Coder workspaces
          params:
            - name: namespace
              type: string
            - name: tag
              type: string
            - name: coder-helm-version
              type: string
          steps:
            - name: create-vcluster
              image: ghcr.io/sprint-cloud/pipeline-worker:82dc994798d9843640f67c1ac3384072757a3124
              workdir: $(workspaces.output.path)
              script: |
                  vcluster create workspace-test-$(params.tag) --namespace=$(params.namespace) --connect=false
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  kubectl get ns
            - name: create-coder-db
              image: ghcr.io/sprint-cloud/pipeline-worker:82dc994798d9843640f67c1ac3384072757a3124
              workdir: $(workspaces.output.path)
              script: |
                  helm repo add bitnami https://charts.bitnami.com/bitnami
                  helm repo update
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  helm install coder-db bitnami/postgresql \
                  --namespace coder \
                  --create-namespace \
                  --set auth.username=coder \
                  --set auth.password=coder \
                  --set auth.database=coder \
                  --set persistence.size=10Gi
            - name: install-cnpg-operator
              image: ghcr.io/sprint-cloud/pipeline-worker:82dc994798d9843640f67c1ac3384072757a3124
              script: |
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  kubectl apply -f \
                  https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-1.20/releases/cnpg-1.20.1.yaml
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  kubectl wait pods -n cnpg-system -l app.kubernetes.io/name=cloudnative-pg --for condition=Ready --timeout=360s
            - name: install-coder
              image: ghcr.io/sprint-cloud/pipeline-worker:82dc994798d9843640f67c1ac3384072757a3124
              workdir: $(workspaces.template.path)
              script: |
                  helm repo add coder-v2 https://helm.coder.com/v2
                  helm repo update

                  # Create DB secret
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  kubectl create secret generic coder-db-url -n coder \
                  --from-literal=url="postgres://coder:coder@coder-db-postgresql.coder.svc.cluster.local:5432/coder?sslmode=disable"

                  # Install Coder
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  helm install coder coder-v2/coder \
                  --namespace coder \
                  --values $(workspaces.template.path)/coder.values.yaml \
                  --version $(params.coder-helm-version)
                  vcluster connect workspace-test-$(params.tag) --namespace=$(params.namespace) -- \
                  kubectl wait pods -n coder -l app.kubernetes.io/instance=coder --for condition=Ready --timeout=360s

            - name: create-workspace
              image: ghcr.io/sprint-cloud/pipeline-worker:82dc994798d9843640f67c1ac3384072757a3124
              workdir: $(workspaces.template.path)
              script: |
                coder --url http://coder-x-coder-x-workspace-test-$(params.tag) login \
                --first-user-email test@example.com \
                --first-user-password=Testingcoder123! \
                --first-user-username=testing \
                --first-user-trial=false
                coder template create -y -d $(workspaces.template.path)
              
  finally:
      - name: cleanup
        params:
          - name: namespace
            value: $(params.testing-namespace)
          - name: tag
            value: $(params.testing-tag)
        taskSpec:
          params:
            - name: namespace
              type: string
            - name: tag
              type: string
          steps:
            - name: create-vcluster
              image: ghcr.io/sprint-cloud/pipeline-worker:3bc7c6958c8b3b694b94c024a02cb5694a07a649
              script: |
                  vcluster delete workspace-test-$(params.tag) --namespace $(params.namespace)

    
                
